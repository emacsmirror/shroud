\input texinfo
@c -*- texinfo -*-

@include prog.texi
@include version.texi

@c %**start of header
@setfilename emacs-shroud.info
@documentencoding UTF-8
@settitle @value{PROG-NAME} Reference Manual
@documentlanguage en
@c %**end of header

@include urls.texi
@copying
Copyright @copyright{} 2019 Amar M. Singh@*

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end quotation
@end copying

@dircategory @value{PROG-NAME}
@direntry
* @value{PROG-NAME}: (emacs-shroud).       Lisp hacker's password manager.
@end direntry

@titlepage
@title @value{PROG-NAME} Reference Manual
@subtitle A User's Guide for @value{PROG-NAME} Password Manager
@author The @value{PROG-NAME} Developers

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED-MONTH} @*

@insertcopying
@end titlepage

@contents


@c *********************************************************************

@node Top
@top @value{PROG-NAME}

Shroud is a password manager written in Guile which uses GnuPG in the
backend. See Shroud's website at
@uref{https://dthompson.us/projects/shroud.html, this link.} This
package is an Emacs interface to Shroud using the
@uref{https://github.com/alezost/bui.el, Buffers User Interface}
library.

Shroud stores secrets in text-format, encrypted using GnuPG. The
entries are a association list of keys and values. S-expressions
provide the benefits that, the file is trivial to parse using a
program, such as Emacs. And, at the same time, is perfectly readable
and editable by a hand.

You can view, copy and edit secrets from Emacs.

This manual describes how to use @value{PROG-NAME} and some of the
ways to customise it; it corresponds to the @value{PROG-NAME} version
@value{VERSION}.

@c See 'manual-html-mono' and 'manual-html-node' in admin/admin.el.
@html
The homepage for @value{PROG-NAME} is at
<a href="@value{HOMEPAGE}">Nongnu.org</a>.<br>
To view this manual in other formats, see
<a href="@value{MANUALS}">Online Manuals</a>.<br>
@end html

For information on the extension language for @value{PROG-NAME}, see @ref{Top, Guile
Reference Manual,, guile,}.

For information on Emacs text-editor, see @ref{Top, Emacs Reference Manual,,
emacs,}.

This is the @value{PROG-NAME} User Manual for the @value{PROG-NAME} password
manager, @value{EDITION}.@refill

@insertcopying

@menu
* Distribution::        Get the source code
* Installation::        Install @value{PROG-NAME} using Guix
* Configuration::                Pick some options, set variables
* Usage::               Some of the ways to use @value{PROG-NAME} and configure
@c * API::                 The programming interface
@c * Extensions::          Modules and extensions for @value{PROG-NAME}
@c * Development::         Making changes to the source code and contributing
* Copying::             The GNU General Public License gives you permission to redistribute @value{PROG-NAME}
* Documentation License::      The license for this documentation

@end menu

@c *********************************************************************
@node Distribution
@chapter Distribution

@value{PROG-NAME} is @dfn{free software}; this means that everyone is free
to use it and free to redistribute it under certain conditions.
@value{PROG-NAME} is not in the public domain; it is copyrighted and there
are restrictions on its distribution. The precise conditions are found
in the GNU General Public License that comes with
@value{PROG-NAME}. @footnote{This manual is itself covered by the GNU Free
Documentation License.  This license is similar in spirit to the
General Public License, but is more suitable for documentation.}

Get the latest source code using git from Nongnu.org
@example
git clone @value{GIT}
@end example

@ifnothtml
The list of releases are available at @value{RELEASES}
@end ifnothtml

@ifhtml
@html
The list of releases are available at <a href="@value{RELEASES}">Releases.</a>
@end html
@end ifhtml

@c *********************************************************************
@node Installation
@chapter Installation

@section Install with Guix

If you use the Gnu Guix package manager, then you can easily install
@value{PROG-NAME} with
@example
guix package -i emacs-shroud 
@end example

If you want the latest package, clone the source repository
@example
git clone @value{GIT}
cd emacs-shroud
guix package -f ./guix.scm
@end example

@section from Git

To run from the sources, clone or in any other way download the sources.
@example
git clone @value{GIT}
@end example

Setup Emacs configuration to load the sources, by adding this to your Emacs configs.
@lisp
(push (directory-file-name "/path/to/emacs-shroud/") load-path)
(require 'shroud)
@end lisp

@section From Melpa Package Repository

The easiest way to install is to use Melpa at @uref{@value{MELPA}}, and just
type this inside Emacs.

@example
M-x package-install RET shroud RET
@end example

@c *********************************************************************
@node Configuration
@chapter Configuration

Shroud, the CLI application which is not included in this package, but
can be installed seperately has some defaults where it looks for the
configuration files and secrets-file. It's configuration can be
changed in the @samp{$HOME/.shroud} file. The default secrets file is
stored in @samp{$HOME/.config/shroud/db.gpg}.

You can edit @samp{$HOME/.shroud} to modify Shroud's behaviour.

Emacs-shroud can be configured to use the same defaults as Shroud CLI
implementation.
@lisp
(require 'shroud)
(setq shroud-el--database-file "~/.config/shroud/db.gpg")
(setq shroud-el--config-file "~/.shroud")
(setq shroud-el--gpg-key "user@@example.com")
@end lisp

If no usable GnuPG key is set neither one is found in the
configuration file, Shroud may prompt you to choose a key each time
you edit the secrets file.

To initialize Shroud, add this to your configuration file.

@example
(shroud--init)
@end example

If no executable is found for Shroud CLI then the program will setup
automatically to use Elisp implementation only. You can choose to use
the Elisp implementation exclusively with this in your Emacs
configuration.
@lisp
(setq shroud-executable nil)
(shroud--init)
@end lisp

Or you can use the Emacs's Customise feature:
@example
M-x customize-group shroud
@end example


@section Sample Shroud Config

By default it's stored in @samp{~/.shroud}

The config expects an alist that at the very least contains a symbol
@samp{user-id} associated to a valid GnuPG key.
@lisp
'((user-id . "user@@example.com"))
@end lisp

@section Sample Shroud Secrets File

By default it's stored in @samp{~/.config/shroud/db.gpg}

Though you can add as many fields as you'd like to the @samp{contents}
section, please be wary to use @samp{password} and @samp{username}
fields, spelled exactly so. You can always add extra fields for
example 'notes', or 'comments' but the included Interfaces only
support a few given fields 'url', 'username', and 'password'.
@lisp
;; -*- epa-file-encrypt-to: ("user@@example.com") -*-
(((id . "user01")
      (contents  ("password" . "hackme") ("username" . "please")))
 ((id . "user02")
      (contents  ("password" . "1337") ("username" . "l33t") ("url" . "abc.xyz")))
@end lisp


@c *********************************************************************
@node Usage
@chapter Usage

There are two user-facing interfaces included with this package, A
Buffers User Interface accessible with
@example
M-x shroud-bui
@end example

If you'd like to bind it to a keyboard shortcut, add this to the Emacs configuration file.
@example
(global-set-key (kbd "C-c p") 'shroud-bui)
@end example

Keybinds for the Buffers Interface:
@multitable {aaa} {aaaaaaaaaaaaaaaaaaa}
@headitem Key
@tab Action
@item ``c''
@tab Copy password
@item ``d''
@tab Delete entry
@item ``e''
@tab Edit entry at point
@item ``a''
@tab Add new entry
@item ``w''
@tab Copy url
@item ``I''
@tab Copy username
@item ``g''
@tab Refresh buffer
@end multitable

There is also a less intrusive and a minimal Minibuffer interface:
@example
M-x shroud
@end example

@c *********************************************************************
@node Copying
@appendix GNU GENERAL PUBLIC LICENSE
@include gpl-3.texi

@c *********************************************************************
@node Documentation License
@appendix GNU Free Documentation License
@include fdl-1.3.texi
@bye
